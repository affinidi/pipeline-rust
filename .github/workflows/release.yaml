on:
  workflow_call:
    inputs:
      toolchain:
        required: false
        type: string
        default: stable
      rustflags:
        required: false
        type: string
        default: ""
      release_dry_run:
        required: false
        type: boolean
        default: true
      release_debug:
        required: false
        type: boolean
        default: false
      release_max_retries:
        required: false
        type: number
        default: 10
      auditIgnore:
        required: false
        type: string
        default: ""
    secrets:
      CARGO_REGISTRY_TOKEN:
        description: crates.io access token
        required: false
jobs:
  release:
    runs-on: ubuntu-24.04
    environment: "release"
    steps:
      # - name: Free Disk Space (Ubuntu)
      #   uses: insightsengineering/disk-space-reclaimer@v1
      #   with:
      #     tools-cache: true

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}

      - name: configure git
        run: |
          echo "GITHUB_ACTOR=${GITHUB_ACTOR}"
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ inputs.toolchain }}
          rustflags: ${{ inputs.rustflags }}
          override: true

      - uses: affinidi/pipeline-rust/.github/actions/rust-dependencies@main

      - name: Build project
        run: cargo build --release

      # - name: Release
      #   if: ${{ github.ref == 'refs/heads/main' }}
      #   run: |
      #     if ! cargo release --version; then
      #       cargo install cargo-release
      #     fi
      #     # '--verbose' was moved to the condition as if yes is '' in 'condition && yes || no' then no is picked (as condition && '' is false)
      #     cargo release --no-confirm --workspace ${{ inputs.release_dry_run && '--verbose --unpublished' || '--verbose --unpublished --execute' }}
      #   env:
      #     CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      # temporarily switched to publish as release does not work for already published crates
      - name: Release
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          debug="${{ inputs.release_debug }}"
          max_retries=${{ inputs.release_max_retries }}
          retries=0
          all_published_crates=()
          published_crates=()
          failed_crates=()

          while [[ ${#published_crates[@]} -gt 0 || ${#failed_crates[@]} -gt 0 || $retries == 0 ]]
          do
              if [[ $retries == $max_retries ]]
              then
                  echo "Max retries (${max_retries}) reached, exiting."
                  if [[ ${#failed_crates[@]} -gt 0 ]]
                  then
                      echo "Creates published in the current run: [${all_published_crates[@]}]."
                      echo "Crates which were not published: [${failed_crates[@]}]."
                  fi
                  exit 1
              elif [[ $retries -gt 0 ]]
              then
                  if [[ ${#failed_crates[@]} -eq 0 ]]
                  then
                      echo "Seems all crates were published."
                      break
                  fi
              fi
              retries=$((retries + 1))
              if [[ $retries -gt 1 ]]
              then
                  echo "[${retries}/${max_retries}] Creates published in the previous run: [${published_crates[@]}]"
                  echo "[${retries}/${max_retries}] Creates failed in the previous run: [${failed_crates[@]}]"
              fi
              published_crates=()
              failed_crates=()
              for crate in $(cargo metadata --format-version=1 --no-deps | jq -r '.packages[].manifest_path' | xargs dirname); do
                  echo "Publishing crate $crate..."

                  crate_name=${crate##*/}
                  if [[ "${debug}" == "true" ]]
                  then
                      echo "crate_name=${crate_name}"
                  fi

                  if [[ "${debug}" == "true" ]]
                  then
                      cargo info ${crate_name} | grep "version" | grep --invert-match "rust-version" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' || echo "Cannot fetch remote version"
                  fi
                  local_version=$(cargo info ${crate_name} | grep "version" | grep --invert-match "rust-version" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
                  if [[ "${debug}" == "true" ]]
                  then
                      echo local_version=${local_version}
                  fi

                  if [[ "${debug}" == "true" ]]
                  then
                      cargo search --limit 1 --quiet ${crate_name} | grep --before-context=0 --after-context=0 ${crate_name} | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' || echo "Cannot fetch remote version"
                  fi
                  remote_version=$(cargo search --limit 1 --quiet ${crate_name} | grep --before-context=0 --after-context=0 ${crate_name} | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' || echo "")
                  if [[ "${debug}" == "true" ]]
                  then
                      echo remote_version=${remote_version}
                  fi

                  if [[ "${local_version}" != "${remote_version}" ]]
                  then
                      cd $crate
                      echo "Publishing ${crate_name}@${local_version}]..."
                      set +e
                      cargo publish ${{ inputs.release_dry_run && '--dry-run' || '' }}
                      publish_exit_code=$?
                      set -e
                      if [[ "$publish_exit_code" == "0" ]]
                      then
                          if [[ ! ${all_published_crates[@]} =~ $crate_name ]]
                          then
                              all_published_crates+=($crate_name)
                          fi
                          published_crates+=($crate_name)
                      else
                          failed_crates+=($crate_name)
                      fi
                      cd ..
                  else
                      git tag --annotate "${crate_name}:${remote_version}" --message="Release tag for "${crate_name}:${remote_version}" || echo "Tag already exists"
                      echo "No release needed for ${crate_name} as version [${remote_version}] was already released."
                  fi
              done
          done
          echo "Creates published in the current run: [${all_published_crates[@]}]."
          echo "Creates failed in the current run: [${failed_crates[@]}]."
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Push Tags
        run: git push --follow-tags

      - name: Check disk usage
        run: df -h
