on:
  workflow_call:
    inputs:
      toolchain:
        required: false
        type: string
        default: stable
      rustflags:
        required: false
        type: string
        default: ""
      cargoDenyRustVersion:
        required: false
        type: string
        default: "1.85.0"
      auditIgnore:
        required: false
        type: string
        default: ""
      coverage:
        required: false
        type: number
        default: 80
      useRedis:
        required: false
        type: boolean
        default: true

jobs:
  audit:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
      - uses: actions-rust-lang/audit@v1
        name: Audit Rust Dependencies
        with:
          # Comma separated list of issues to ignore (or configure in audit.toml)
          ignore: ${{ inputs.auditIgnore }}
  cargo-deny:
    name: "License check"
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
      - uses: EmbarkStudios/cargo-deny-action@v2
        with:
          rust-version: ${{ inputs.cargoDenyRustVersion }}
          command: check bans licenses sources
  check:
    name: Cargo Check
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ inputs.toolchain }}
          rustflags: ${{ inputs.rustflags }}
          override: true
      - uses: affinidi/pipeline-rust/.github/actions/rust-dependencies@main
      - run: cargo check

  test:
    name: Test Suite
    runs-on: ubuntu-24.04
    services:
      redis:
        image: ${{ inputs.useRedis && 'redis' || ''}}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ inputs.toolchain }}
          rustflags: ${{ inputs.rustflags }}
          override: true
      - uses: affinidi/pipeline-rust/.github/actions/rust-dependencies@main
      - run: cargo test

  fmt:
    name: Rustfmt
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ inputs.toolchain }}
          rustflags: ${{ inputs.rustflags }}
          override: true
      - uses: affinidi/pipeline-rust/.github/actions/rust-dependencies@main
      - name: Rustfmt Check
        uses: actions-rust-lang/rustfmt@v1

  clippy:
    name: Clippy
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ inputs.toolchain }}
          rustflags: ${{ inputs.rustflags }}
          override: true
      - uses: affinidi/pipeline-rust/.github/actions/rust-dependencies@main
      - run: cargo clippy --no-deps

  wiz-scan:
    uses: affinidi/pipeline-security/.github/workflows/wizcli-dirscan.yml@main
    secrets: inherit

  coverage:
    name: Coverage
    runs-on: ubuntu-24.04
    services:
      redis:
        image: ${{ inputs.useRedis && 'redis' || ''}}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ inputs.toolchain }}
          rustflags: ${{ inputs.rustflags }}
          override: true
      - uses: affinidi/pipeline-rust/.github/actions/rust-dependencies@main
      - name: Generate code coverage
        run: |
          if ! cargo llvm-cov --version; then
            cargo install cargo-llvm-cov
          fi

          for crate_name in $(cargo metadata --format-version=1 --no-deps | jq -r '.packages[] | select(.source == null) | .name'); do
            echo "Generating coverage for crate at $crate_name"

            local_version=$(cargo info ${crate_name} | grep "version" | grep --invert-match "rust-version" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
            cargo llvm-cov --package ${crate_name}@${local_version} --summary-only --fail-under-lines=${{ inputs.coverage }}
          done
