on:
  workflow_call:
    inputs:
      toolchain:
        required: false
        type: string
        default: stable
      auditIgnore:
        required: false
        type: string
        default: ''
      coverage:
        required: false
        type: number
        default: 80
      useRedis:
        required: false
        type: boolean
        default: true

jobs:
  audit:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
      - uses: actions-rust-lang/audit@v1
        name: Audit Rust Dependencies
        with:
          # Comma separated list of issues to ignore (or configure in audit.toml)
          ignore: ${{ inputs.auditIgnore }}
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ github.ref_name }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ github.ref_name }}
  cargo-deny:
    name: 'License check'
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
      - uses: EmbarkStudios/cargo-deny-action@v1
        with:
          command: check bans licenses sources
  check:
    name: Cargo Check
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ inputs.toolchain }}
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: check

  test:
    name: Test Suite
    runs-on: ubuntu-24.04
    services:
      redis:
        image: ${{ inputs.useRedis && 'redis' || ''}}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ inputs.toolchain }}
          override: true

      - uses: actions-rs/cargo@v1
        with:
          command: test

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ github.ref_name }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ github.ref_name }}
  fmt:
    name: Rustfmt
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ inputs.toolchain }}
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ inputs.toolchain }}
          override: true
      - run: rustup component add clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy

  wiz-scan:
    uses: affinidi/pipeline-security/.github/workflows/wizcli-dirscan.yml@main
    secrets: inherit

  coverage:
    name: Coverage
    runs-on: ubuntu-24.04
    services:
      redis:
        image: ${{ inputs.useRedis && 'redis' || ''}}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ inputs.toolchain }}
          override: true
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Generate code coverage
        run: |
          if ! cargo tarpaulin --version; then
            cargo install cargo-tarpaulin
          fi

          for crate_path in $(cargo metadata --format-version=1 --no-deps | jq -r '.packages[] | select(.source == null) | .manifest_path | gsub("/Cargo.toml"; "")'); do
            echo "Generating coverage for crate at $crate_path"
            cd $crate_path
            cargo tarpaulin --skip-clean --engine llvm --fail-under=${{ inputs.coverage }} --manifest-path $crate_path/Cargo.toml
            cd -
          done
